plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.neoforged.net/releases" }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neoforged_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Imports
    implementation fg.deobf("curse.maven:jei-${jei_version}")
    implementation fg.deobf("curse.maven:spark-${spark_version}")

    // implementation fg.deobf("curse.maven:ctm-${ctm_version}")
}

mixin {
    add sourceSets.main, "warp_pipes.refmap.json"
}

version = "${minecraft_version}-${mod_jar_version}"
group = 'com.wenxin2.warp_pipes'
archivesBaseName = 'warp_pipes'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/NeoForged/NeoForm/blob/main/Mojang.md
    mappings channel: 'official', version: '1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'warp_pipes'
            arg "-mixin.config=warp_pipes.mixins.json"

            mods {
                warp_pipes {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'warp_pipes'
            arg "-mixin.config=warp_pipes.mixins.json"

            mods {
                warp_pipes {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'warp_pipes'

            mods {
                warp_pipes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'warp_pipes', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                warp_pipes {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "warp_pipes",
                "Specification-Vendor"    : "warp_pipes_vendor",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "warp_pipes_vendor",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "warp_pipes.mixins.json"
        ])
    }
}

processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
        mavenCentral()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
